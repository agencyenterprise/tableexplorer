/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../../../common";
import type {
  PaymentSplitter,
  PaymentSplitterInterface,
} from "../../../contracts/PaymentSplitter3.sol/PaymentSplitter";

const _abi = [
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "previousOwner",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "newOwner",
        type: "address",
      },
    ],
    name: "OwnershipTransferred",
    type: "event",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "collection",
        type: "address",
      },
      {
        internalType: "address[]",
        name: "payees",
        type: "address[]",
      },
      {
        internalType: "uint256[]",
        name: "fees",
        type: "uint256[]",
      },
    ],
    name: "addPayees",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "collection",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "tokenAmount",
        type: "uint256",
      },
    ],
    name: "addPayment",
    outputs: [],
    stateMutability: "payable",
    type: "function",
  },
  {
    inputs: [],
    name: "owner",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address payable",
        name: "account",
        type: "address",
      },
    ],
    name: "release",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "renounceOwnership",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "collection",
        type: "address",
      },
    ],
    name: "totalFees",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "newOwner",
        type: "address",
      },
    ],
    name: "transferOwnership",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
];

const _bytecode =
  "0x608060405234801561001057600080fd5b5061001a3361001f565b61006f565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b610a728061007e6000396000f3fe6080604052600436106100705760003560e01c806385bac2371161004e57806385bac237146100f55780638da5cb5b14610108578063e123944414610130578063f2fde38b1461015057600080fd5b806319165587146100755780634a793f2d14610097578063715018a6146100e0575b600080fd5b34801561008157600080fd5b506100956100903660046107ad565b610170565b005b3480156100a357600080fd5b506100cd6100b23660046107ad565b6001600160a01b031660009081526002602052604090205490565b6040519081526020015b60405180910390f35b3480156100ec57600080fd5b5061009561027d565b6100956101033660046107d1565b610291565b34801561011457600080fd5b506000546040516001600160a01b0390911681526020016100d7565b34801561013c57600080fd5b5061009561014b3660046108d3565b610373565b34801561015c57600080fd5b5061009561016b3660046107ad565b610557565b6000805b60055481101561026e57600060058281548110610193576101936109a9565b60009182526020808320909101546001600160a01b03908116808452600183526040808520928916855291909252909120549091508015610259576001600160a01b038083166000818152600360209081526040808320948a168352938152838220549282526004905291822054909161020d83836109d5565b905061021984826109ec565b6102239088610a0b565b965061022f8184610a0b565b6001600160a01b038087166000908152600360209081526040808320938d16835292905220555050505b5050808061026690610a23565b915050610174565b5061027982826105d0565b5050565b6102856106ee565b61028f6000610748565b565b6001600160a01b038216600090815260026020526040902054346102b583836109ec565b146103415760405162461bcd60e51b815260206004820152604b60248201527f5061796d656e7453706c69747465723a207061796d656e74206469666665726560448201527f6e742066726f6d2074686520666565206368617267656420666f72207468697360648201526a1031b7b63632b1ba34b7b760a91b608482015260a4015b60405180910390fd5b6001600160a01b03831660009081526004602052604081208054849290610369908490610a0b565b9091555050505050565b80518251146103dd5760405162461bcd60e51b815260206004820152603060248201527f5061796d656e7453706c69747465723a2070617965657320616e64206665657360448201526f040d8cadccee8d040dad2e6dac2e8c6d60831b6064820152608401610338565b600082511161042e5760405162461bcd60e51b815260206004820152601a60248201527f5061796d656e7453706c69747465723a206e6f207061796565730000000000006044820152606401610338565b6000805b83518110156104f35782818151811061044d5761044d6109a9565b602002602001015160016000876001600160a01b03166001600160a01b03168152602001908152602001600020600086848151811061048e5761048e6109a9565b60200260200101516001600160a01b03166001600160a01b03168152602001908152602001600020819055508281815181106104cc576104cc6109a9565b6020026020010151826104df9190610a0b565b9150806104eb81610a23565b915050610432565b506001600160a01b039093166000818152600260205260408120949094556005805460018101825594527f036b6384b5eca791c62761152d0c79bb0604c104a5fb6f4eb0703f3154bb3db090930180546001600160a01b0319169093179092555050565b61055f6106ee565b6001600160a01b0381166105c45760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b6064820152608401610338565b6105cd81610748565b50565b804710156106205760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a20696e73756666696369656e742062616c616e63650000006044820152606401610338565b6000826001600160a01b03168260405160006040518083038185875af1925050503d806000811461066d576040519150601f19603f3d011682016040523d82523d6000602084013e610672565b606091505b50509050806106e95760405162461bcd60e51b815260206004820152603a60248201527f416464726573733a20756e61626c6520746f2073656e642076616c75652c207260448201527f6563697069656e74206d617920686176652072657665727465640000000000006064820152608401610338565b505050565b6000546001600160a01b0316331461028f5760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401610338565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b6001600160a01b03811681146105cd57600080fd5b6000602082840312156107bf57600080fd5b81356107ca81610798565b9392505050565b600080604083850312156107e457600080fd5b82356107ef81610798565b946020939093013593505050565b634e487b7160e01b600052604160045260246000fd5b604051601f8201601f1916810167ffffffffffffffff8111828210171561083c5761083c6107fd565b604052919050565b600067ffffffffffffffff82111561085e5761085e6107fd565b5060051b60200190565b600082601f83011261087957600080fd5b8135602061088e61088983610844565b610813565b82815260059290921b840181019181810190868411156108ad57600080fd5b8286015b848110156108c857803583529183019183016108b1565b509695505050505050565b6000806000606084860312156108e857600080fd5b83356108f381610798565b925060208481013567ffffffffffffffff8082111561091157600080fd5b818701915087601f83011261092557600080fd5b813561093361088982610844565b81815260059190911b8301840190848101908a83111561095257600080fd5b938501935b8285101561097957843561096a81610798565b82529385019390850190610957565b96505050604087013592508083111561099157600080fd5b505061099f86828701610868565b9150509250925092565b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052601160045260246000fd5b6000828210156109e7576109e76109bf565b500390565b6000816000190483118215151615610a0657610a066109bf565b500290565b60008219821115610a1e57610a1e6109bf565b500190565b600060018201610a3557610a356109bf565b506001019056fea2646970667358221220634d582b6412c6db7e7a982531e64245b0f8e09402faa386c2a79693295b686b64736f6c634300080f0033";

type PaymentSplitterConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: PaymentSplitterConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class PaymentSplitter__factory extends ContractFactory {
  constructor(...args: PaymentSplitterConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<PaymentSplitter> {
    return super.deploy(overrides || {}) as Promise<PaymentSplitter>;
  }
  override getDeployTransaction(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  override attach(address: string): PaymentSplitter {
    return super.attach(address) as PaymentSplitter;
  }
  override connect(signer: Signer): PaymentSplitter__factory {
    return super.connect(signer) as PaymentSplitter__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): PaymentSplitterInterface {
    return new utils.Interface(_abi) as PaymentSplitterInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): PaymentSplitter {
    return new Contract(address, _abi, signerOrProvider) as PaymentSplitter;
  }
}
